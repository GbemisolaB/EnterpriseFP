# -*- coding: utf-8 -*-
"""Group_1_finalproject_AI_in_enterprisesystem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eM8rXGROCSRnXqtsMsuc9g9eWa8EW6oK

dataset; https://www.kaggle.com/fedesoriano/stroke-prediction-dataset
"""

#importing phyton liblibraries 

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt
from pylab import rcParams
import seaborn as sns

#importing dataset and printing the head

data=pd.read_csv("stroke_data.csv")
data

data.shape

data.columns

#For the algorithms to understand the data, all string data types will be changed to categorical integer
#crossvalidation_df_newc['DIAG']=crossvalidation_df_newc['DIAG'].replace(['B','M'],['0','1'])
data ['gender'] = data ['gender'].replace (['Female', 'Male', 'Other'], ['0', '1','2'])
data ['ever_married'] = data ['ever_married'].replace(['Yes', 'No'], ['0', '1'])
data ['work_type'] = data ['work_type'].replace(['Self-employed', 'Private', 'Govt_job', 'children', 'Never_worked'], ['0','1','2','3','4'])
data ['Residence_type'] = data ['Residence_type'].replace(['Rural', 'Urban'], ['0', '1'])
data ['smoking_status'] = data ['smoking_status'].replace(['formerly smoked', 'never smoked', 'smokes', 'Unknown'], ['0', '1', '2', '3'])

data

#checking data for missing values 
count_nan=data.isnull().sum()
print(count_nan[count_nan>0])

#dropping missing values 
ndata=data.dropna()

ndata

#checking the dataset for duplicated values
count_dup=ndata.duplicated().sum()
print(count_dup[count_dup>0])

"""**DATA VISUAVISUALIZATION** 


The next step is to visualize the data using graphs
"""

ndata.plot()

sns.pairplot(ndata)

sns.displot(ndata, x="gender", hue="stroke")

sns.displot(ndata, x="age")

sns.displot(ndata, x="hypertension", hue = "stroke" )

sns.displot(ndata, x="heart_disease", hue = "stroke" )

sns.displot(ndata, x="ever_married", hue = "stroke" )

sns.displot(ndata, x="work_type", hue = "stroke" )

sns.displot(ndata, x="Residence_type", hue = "stroke" )

sns.displot(ndata, x="avg_glucose_level", hue = "stroke" )

sns.displot(ndata, x="bmi", hue = "stroke" )

sns.displot(ndata, x="smoking_status", hue = "stroke" )

#importing libraries for machine learning model
from sklearn.metrics import precision_recall_fscore_support as score
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

#creating features and target variable 
X = ndata[['gender', 'age', 'hypertension', 'heart_disease', 'ever_married', 'work_type', 'Residence_type', 'avg_glucose_level', 'bmi', 'smoking_status',]].values
y = ndata ['stroke'].values

#splitting the data into train and test data for random forest classifier
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

#fitting the train/test split data into random forest
rfc = RandomForestClassifier(criterion = 'entropy', n_estimators = 100, random_state = 42)
rfc_model = rfc.fit(X_train, y_train)
rfc_model

#evaluating random forest prediction on the training data
y_train_pred = rfc .predict(X_train)
rfc.score(X_train, y_train)

#evaluating random forest prediction on the test data
y_test_pred = rfc.predict(X_test)
rfc.score(X_test,y_test)

